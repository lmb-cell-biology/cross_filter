#!/usr/bin/python

PROG_NAME   = "Plot coverage" 
DESCRIPTION = "Plot heatmap showing genome and exon coverage values for input strains."

import os
import sys
import cross_fil_exe as exe
current_path = os.path.realpath(__file__)
current_path = os.path.dirname(current_path) + '/cell_bio_util'
sys.path.append(current_path)
import cell_bio_util as util


def plot_coverage(coverage_files,output=None):
  outdir = coverage_files[0]
  outdir = outdir.split("/")
  outdir = outdir[0:-2]
  outdir = "/".join(outdir)
  if output is None:
    output = util.get_rand_string(8)
    util.info("Header for output files has not been specified. Random string %s will be used instead...") % output
  all_strains_cov = "%s/%s_all_strains_cov.txt" % (outdir,output)
  fileObj1 = open(all_strains_cov,"w")

  fileObj1.write("Genome_cov\tExon_cov\n")

  for f in coverage_files:
    strain = f.split("/")
    strain = strain[-1]
    strain = strain.split("_")
    strain = strain[0]
    fileObj = open(f,"r")
    line1 =  fileObj.readline()
    line1 = line1.split(" ")
    genome_cov = line1[4]
    genome_cov = genome_cov.rstrip()
    line2 = fileObj.readline()
    line2 = line2.split(" ")
    exon_cov = line2[7]
    exon_cov = exon_cov.rstrip()
    towrite = "\t".join([strain,genome_cov,exon_cov]) + "\n"
    fileObj1.write(towrite)
    fileObj.close()

  fileObj1.close()
  
  util.info("File saved as %s..." % all_strains_cov)
  
  cmdArgs = ['Rscript','--vanilla',  exe.EXE['phc'],
  all_strains_cov,output]
  
  util.call(cmdArgs)



if __name__ == '__main__':

  from argparse import ArgumentParser
   
  epilog = 'For further help on running this program please email paulafp@mrc-lmb.cam.ac.uk.\n\n'
  epilog += 'Example use:\n\n'
  
  arg_parse = ArgumentParser(prog=PROG_NAME, description=DESCRIPTION,
                             epilog=epilog, prefix_chars='-', add_help=True)
  
  arg_parse.add_argument('coverage_files',nargs='+', metavar='COVERAGE_FILES',
                         help='File paths for files of type R_coverage.out generated by cross_fil_map') 

  arg_parse.add_argument('-output', metavar='OUTPUT_HEADER',default=None,
                         help='Header used to save output files.') 

  args = vars(arg_parse.parse_args())

  coverage_files = args['coverage_files']
  output = args['output']
  
  plot_coverage(coverage_files = coverage_files, output = output)

