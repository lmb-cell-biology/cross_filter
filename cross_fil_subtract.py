#!/usr/bin/python

import os
current_path = os.path.realpath(__file__)
current_path = os.path.dirname(current_path) + '/cell_bio_util'
import cross_fil_util as util

PROG_NAME   = 'cross_fil_subtract'
DESCRIPTION = 'CrossFil Python script to subtract a background VCF file (generated by cross_fil_background) variations from a strain specific VCF file (generated by cross_fil_genotype).'
OUTPUT_TAG  = '_subt_'
DEFAULT_INTERVAL_LENGTH = 2000
DEFAULT_GENOME_VERSION = 'WBcel235.86'

def subtract_background(strain_vcf_path, background_vcf_path, genome_fasta_path,
                        out_dir, genome_version, interval_length, output_tag):
  
  bg_path_root, bg_file_ext = os.path.splitext(background_vcf_path)
  bg_file_root = os.path.basename(bg_path_root)
    
  util.info('Filtering VCF file %s' % strain_vcf_path)
  
  path_root, file_ext = os.path.splitext(strain_vcf_path)
  
  if out_dir:
    file_root = os.path.basename(path_root)
    path_root = os.path.join(out_dir, file_root)
  
  path_root = '%s%s%s' % (path_root, output_tag, bg_file_root) # Combines background name and sample/strain name
  
  out_vcf_path = path_root + '.vcf'
  out_vcf_path = util.get_safe_file_path(out_vcf_path) # Avoid overwrites
  path_root, file_ext = os.path.splitext(out_vcf_path) # Path root should have changed if a substitute name was used
  
  snpeff_vcf_path  = path_root + '_SnpEff.vcf'
  snpeff_summ_path = path_root + '_summary.html'
  snpsift_tab_path = path_root + '_SnpSift.tabular'

  cmd_args = list(util.JAVA) + ['-jar', util.EXE['gatk'],
                                '-T', 'SelectVariants',
                                '-R', genome_fasta_path,
                                '-V', strain_vcf_path,
                                '--discordance', background_vcf_path,
                                '-o', out_vcf_path,
                                ]

  util.call(cmd_args)
 
  util.info('Running SnpEff on %s' % out_vcf_path)

  # Run SnpEff on resulting VCF file

  cmd_args = list(util.JAVA) + ['-jar', util.EXE['snpeff'], '-v',
                                '-upDownStreamLen', str(interval_length),
                                '-stats', snpeff_summ_path,
                                genome_version,
                                out_vcf_path]

  util.call(cmd_args, stdout=snpeff_vcf_path)

  # Create tabular output from VCF file using SnpSift
 
  util.info('Running SnpSift on %s' % snpeff_vcf_path)

  cmd_args =  list(util.JAVA) + ['-jar', util.EXE['snpsift'],
                                 'extractFields', snpeff_vcf_path,
                                 '-s', ',',
                                 '-e', '.',
                                 'CHROM', 'POS', 'REF', 'ALT', 'QUAL', 'DP',
                                 'ANN[*].ERRORS',  'ANN[*].GENEID', 'ANN[*].GENE',
                                 'ANN[*].BIOTYPE', 'ANN[*].TRID',   'ANN[*].RANK',
                                 'ANN[*].EFFECT',  'ANN[*].HGVS_P', 'ANN[*].HGVS_C',
                                 'ANN[*].CDS_POS', 'ANN[*].CDS_LEN']

  util.call(cmd_args, stdout=snpsift_tab_path)
  
  util.info('Results saved to %s and similarly named analysis files' % out_vcf_path)


def cross_fil_subtract(strain_vcf_paths, background_vcf_path, genome_fasta_path, genome_version, out_dir=None,
                       num_cpu=util.MAX_CORES, interval_length=DEFAULT_INTERVAL_LENGTH, output_tag=OUTPUT_TAG):
  
  # Accepts multiple inputs, which can all be done in parallel
  # This function is just a parallelisation wrapper for subtract_background()
  
  common_args = [background_vcf_path, genome_fasta_path, genome_version, out_dir, interval_length, output_tag]

  util.parallel_split_job(subtract_background, strain_vcf_paths, common_args, num_cpu)

  util.info('cross_fil_subtract done!')  


if __name__ == '__main__':

  from argparse import ArgumentParser
   
  epilog = 'For further help on running this program please email tjs23@cam.ac.uk.\n\n'
  epilog += 'Example use:\n\n'
  epilog += 'python3 cross_fil_subtract.py /data/*_extracted.vcf '
  epilog += '/home/username/background_1.vcf /data/genome_builds/c_elegans.PRJNA13758.WS259.genomic.fa'
  epilog += '-o /home/username/results/'
  
  arg_parse = ArgumentParser(prog=PROG_NAME, description=DESCRIPTION,
                             epilog=epilog, prefix_chars='-', add_help=True)

  arg_parse.add_argument('vcf_paths', nargs='+', metavar='INPUT_VCF_FILES',
                         help='Input VCF file paths for extracted strains created by cross_fil_genotype (may contain wildcards)') 

  arg_parse.add_argument('bg_vcf_path', metavar='BACKGROUND_VCF_FILE',
                         help='Background VCF file path to subtract from input VCF files') 

  arg_parse.add_argument('genome_fasta', metavar='GENOME_FASTA',
                         help='File path of genome sequence FASTA file') 

  arg_parse.add_argument('-o', metavar='OUT_DIR',
                         help='Optional output directory for filtered VCF and analysis files') 

  arg_parse.add_argument('-gv', metavar='GENOME_VERSION', default=DEFAULT_GENOME_VERSION,
                         help='Genome version name from SnpEff database. Default: %s' % DEFAULT_GENOME_VERSION) 

  arg_parse.add_argument('-ivl', metavar='INTERVAL_LENGTH', default=DEFAULT_INTERVAL_LENGTH, type=int,
                         help='Upstream/downstream interval length as used by SnpEff. Default: %d' % DEFAULT_INTERVAL_LENGTH) 

  arg_parse.add_argument('-cpu', metavar='NUM_CORES', default=util.MAX_CORES, type=int,
                         help='Number of parallel CPU cores to use. Default: All available (%d)' % util.MAX_CORES) 
  
  arg_parse.add_argument('-q', default=False, action='store_true',
                         help='Sets quiet mode to supress on-screen reporting.')
  
  arg_parse.add_argument('-log', default=False, action='store_true',
                         help='Log all reported output to a file.')
  
  args = vars(arg_parse.parse_args())

  vcf_paths      = args['vcf_paths']
  bg_vcf_path    = args['bg_vcf_path']
  genome_fasta   = args['genome_fasta']
  genome_version = args['gv']
  num_cpu        = args['cpu'] or None # May not be zero
  ivl_length     = args['ivl']
  out_dir        = args['o']

  # Reporting handled by cross_fil_util
  util.QUIET   = args['q']
  util.LOGGING = args['log']  
  
  cross_fil_subtract(vcf_paths, bg_vcf_path, genome_fasta, out_dir, genome_version, num_cpu, ivl_length)
